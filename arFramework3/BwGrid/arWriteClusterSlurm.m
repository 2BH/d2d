% arWriteClusterSlurm(conf)
% 
% arWriteClusterSlurm writes the *.moab file required on the bwGrid cluster.
% 
%   conf  configuration struct generated by arClusterConfig
% 
% Example:
% conf = arClusterConfig
% arWriteClusterSlurm(conf)
% 
% See also arClusterConfig, arFitLhsBwCluster, arWriteClusterMoab

function arWriteClusterSlurm(conf)
if isnumeric(conf.arg1)
    conf.arg1 = num2str(conf.arg1);
elseif ~ischar(conf.arg1)
    error('~ischar(conf.arg1)');
end
    
fid = fopen(conf.file_slurm,'w');

fprintf(fid,'%s\n','#!/bin/sh');
fprintf(fid,'%s\n','########## Begin Slurm header ##########');
fprintf(fid,'%s\n',['#SBATCH --job-name=',conf.name]);
fprintf(fid,'%s\n',['#SBATCH --nodes=',num2str(conf.n_calls)]);
fprintf(fid,'%s\n',['#SBATCH --ntasks-per-node=',num2str(conf.n_inNode)]);
fprintf(fid,'%s\n',['#SBATCH --time=' conf.walltime]);
% fprintf(fid,'%s\n','#SLURM --output=oe');
% fprintf(fid,'%s\n','#SLURM --mail-type=a');
fprintf(fid,'%s\n','########### End Slurm header ##########');
fprintf(fid,'%s\n','echo "Submit Directory: $SLURM_SUBMIT_DIR"');
fprintf(fid,'%s\n','echo "Working Directory: $PWD"');
fprintf(fid,'%s\n','echo "Running on host $HOSTNAME"');
fprintf(fid,'%s\n','echo "Job id: $SLURM_JOB_ID"');
fprintf(fid,'%s\n','echo "Job name: $SLURM_JOB_NAME"'); 
fprintf(fid,'%s\n','echo "Number of nodes allocated to job: $SLURM_JOB_NUM_NODES "');
fprintf(fid,'%s\n','echo "Number of cores allocated to job: $SLURM_NTASKS"');
fprintf(fid,'%s\n','');
fprintf(fid,'%s\n','# Go to submit directory');
fprintf(fid,'%s\n','cd $SLURM_SUBMIT_DIR');
fprintf(fid,'%s\n','echo Directory is `pwd`');
fprintf(fid,'%s\n','');
fprintf(fid,'%s\n',['module load math/matlab/',conf.matlab_release]);
fprintf(fid,'%s\n','');
fprintf(fid,'%s\n','##### for-loop for parallization within a node #######');
fprintf(fid,'%s\n',['for iInNode in {1..',num2str(conf.n_inNode),'}    ']);
fprintf(fid,'%s\n','do');
% conf.arg1 is a placeholder/template for further arguments passed to
% matlab:
fprintf(fid,'%s\n',['( matlab -nodisplay -r "icall=$1; iInNode=$iInNode; arg1=',conf.arg1,'; ',strrep(conf.file_matlab,'.m',''),'" &> ${1}_${iInNode}.log ) &']);
fprintf(fid,'%s\n','    sleep 2');
fprintf(fid,'%s\n','done');
fprintf(fid,'%s\n','');
fprintf(fid,'%s\n','');
fprintf(fid,'%s\n','# Wait for all background processes to finish');
fprintf(fid,'%s\n','wait');
fprintf(fid,'%s\n','');
fprintf(fid,'%s\n','exit');

fclose(fid);
